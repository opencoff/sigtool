// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: internal/pb/key.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Sk struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Esk   []byte                 `protobuf:"bytes,1,opt,name=esk,proto3" json:"esk,omitempty"`
	Salt  []byte                 `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
	// the string is of the form: hash-kdf
	// eg "sha3-argon2id"
	//
	// sha3 => we prehash a user supplied passphrase and expand into a
	// larger string before feeding into argon2i. And we use sha3 for
	// any hkdf expansion
	Algo string `protobuf:"bytes,3,opt,name=algo,proto3" json:"algo,omitempty"`
	// TODO we ought to use an union here for future proofing.
	// For now, we'll simply hard code
	Kdf           *Argon `protobuf:"bytes,4,opt,name=kdf,proto3" json:"kdf,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sk) Reset() {
	*x = Sk{}
	mi := &file_internal_pb_key_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sk) ProtoMessage() {}

func (x *Sk) ProtoReflect() protoreflect.Message {
	mi := &file_internal_pb_key_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sk.ProtoReflect.Descriptor instead.
func (*Sk) Descriptor() ([]byte, []int) {
	return file_internal_pb_key_proto_rawDescGZIP(), []int{0}
}

func (x *Sk) GetEsk() []byte {
	if x != nil {
		return x.Esk
	}
	return nil
}

func (x *Sk) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *Sk) GetAlgo() string {
	if x != nil {
		return x.Algo
	}
	return ""
}

func (x *Sk) GetKdf() *Argon {
	if x != nil {
		return x.Kdf
	}
	return nil
}

// Argon2id params
type Argon struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mem           uint32                 `protobuf:"varint,1,opt,name=mem,proto3" json:"mem,omitempty"`
	Time          uint32                 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Proc          uint32                 `protobuf:"varint,3,opt,name=proc,proto3" json:"proc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Argon) Reset() {
	*x = Argon{}
	mi := &file_internal_pb_key_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Argon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Argon) ProtoMessage() {}

func (x *Argon) ProtoReflect() protoreflect.Message {
	mi := &file_internal_pb_key_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Argon.ProtoReflect.Descriptor instead.
func (*Argon) Descriptor() ([]byte, []int) {
	return file_internal_pb_key_proto_rawDescGZIP(), []int{1}
}

func (x *Argon) GetMem() uint32 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *Argon) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Argon) GetProc() uint32 {
	if x != nil {
		return x.Proc
	}
	return 0
}

type Pk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pk            []byte                 `protobuf:"bytes,1,opt,name=pk,proto3" json:"pk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pk) Reset() {
	*x = Pk{}
	mi := &file_internal_pb_key_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pk) ProtoMessage() {}

func (x *Pk) ProtoReflect() protoreflect.Message {
	mi := &file_internal_pb_key_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pk.ProtoReflect.Descriptor instead.
func (*Pk) Descriptor() ([]byte, []int) {
	return file_internal_pb_key_proto_rawDescGZIP(), []int{2}
}

func (x *Pk) GetPk() []byte {
	if x != nil {
		return x.Pk
	}
	return nil
}

var File_internal_pb_key_proto protoreflect.FileDescriptor

const file_internal_pb_key_proto_rawDesc = "" +
	"\n" +
	"\x15internal/pb/key.proto\"X\n" +
	"\x02sk\x12\x10\n" +
	"\x03esk\x18\x01 \x01(\fR\x03esk\x12\x12\n" +
	"\x04salt\x18\x02 \x01(\fR\x04salt\x12\x12\n" +
	"\x04algo\x18\x03 \x01(\tR\x04algo\x12\x18\n" +
	"\x03kdf\x18\x04 \x01(\v2\x06.argonR\x03kdf\"A\n" +
	"\x05argon\x12\x10\n" +
	"\x03mem\x18\x01 \x01(\rR\x03mem\x12\x12\n" +
	"\x04time\x18\x02 \x01(\rR\x04time\x12\x12\n" +
	"\x04proc\x18\x03 \x01(\rR\x04proc\"\x14\n" +
	"\x02pk\x12\x0e\n" +
	"\x02pk\x18\x01 \x01(\fR\x02pkB\rZ\vinternal/pbb\x06proto3"

var (
	file_internal_pb_key_proto_rawDescOnce sync.Once
	file_internal_pb_key_proto_rawDescData []byte
)

func file_internal_pb_key_proto_rawDescGZIP() []byte {
	file_internal_pb_key_proto_rawDescOnce.Do(func() {
		file_internal_pb_key_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_internal_pb_key_proto_rawDesc), len(file_internal_pb_key_proto_rawDesc)))
	})
	return file_internal_pb_key_proto_rawDescData
}

var file_internal_pb_key_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_internal_pb_key_proto_goTypes = []any{
	(*Sk)(nil),    // 0: sk
	(*Argon)(nil), // 1: argon
	(*Pk)(nil),    // 2: pk
}
var file_internal_pb_key_proto_depIdxs = []int32{
	1, // 0: sk.kdf:type_name -> argon
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_internal_pb_key_proto_init() }
func file_internal_pb_key_proto_init() {
	if File_internal_pb_key_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_internal_pb_key_proto_rawDesc), len(file_internal_pb_key_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_pb_key_proto_goTypes,
		DependencyIndexes: file_internal_pb_key_proto_depIdxs,
		MessageInfos:      file_internal_pb_key_proto_msgTypes,
	}.Build()
	File_internal_pb_key_proto = out.File
	file_internal_pb_key_proto_goTypes = nil
	file_internal_pb_key_proto_depIdxs = nil
}
